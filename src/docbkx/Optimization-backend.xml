<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"./dtd/docbookx.dtd" [
<!ENTITY % myents SYSTEM "./shared.ent">
%myents;
]>
<book status="draft" version="0.1" xmlns="http://docbook.org/ns/docbook">
  <bookinfo>
    <title>Optimization backend</title>

    <author>
      <firstname>Yves Teissier</firstname>

      <surname/>

      <affiliation>
        <orgname/>
      </affiliation>
    </author>

    <pubdate>21/02/2014</pubdate>
  </bookinfo>

  <chapter>
    <title>Document history</title>

    <table frame="all">
      <title>Document history</title>

      <tgroup align="left" cols="4" colsep="0.2" rowsep="1">
        <thead>
          <row>
            <entry>Version</entry>

            <entry>Date</entry>

            <entry>Author</entry>

            <entry>Description</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>0.1</entry>

            <entry>21/02/2014</entry>

            <entry>Yves Teissier</entry>

            <entry>Document creation</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </chapter>

  <chapter>
    <title>Introduction</title>

    <section>
      <para>From the origin the &productName; compiler has been built in order
      to allow maximum flexibility. The downside of this choice is the
      inflation of the generated code and a loss of performances.</para>

      <para>In the embedded software world it's append regularly that we have
      to integrate software on some very constraints devices (low RAM and low
      flash).</para>

      <para>By applying optimization we keep the advantages of fractal
      architecture while keeping the performance of the pure C.</para>

      <note>
        <para>sss.</para>
      </note>
    </section>
  </chapter>

  <chapter>
    <title>Goal of this document</title>

    <section>
      <para>This document is intended to developers who wish to reduce the
      memory foot print of their embedded applications and gain performance
      for some specific features.</para>
    </section>
  </chapter>

  <chapter>
    <title>Optimization technical</title>

    <section>
      <para>The way provided by the &productName; compiler to optimize the
      application is ADL annotations. These annotations are associated to
      specific key work of the MIND language.</para>

      <para>The developer has to identify the code part to be optimized
      following requirements.</para>
    </section>
  </chapter>

  <chapter>
    <title>Annotations</title>

    <section id="optim-annot-static">
      <title>
        <classname>@Static</classname>
      </title>

      <formalpara>
        <title>Annotation fields</title>

        <para>No field</para>
      </formalpara>

      <formalpara>
        <title>Annotation targets</title>

        <para>
          <simplelist type="inline">
            <member>Binding</member>
          </simplelist>
        </para>
      </formalpara>

      <para>The <classname>Static</classname> annotation allows to perform a
      single direct call between a client and a server interface.</para>

      <para>This annotation must be attached to a binding definition.</para>

      <example>
        <title>@Static overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/AtStatic.png"
                       format="PNG" scale="50"/>
          </imageobject>
        </mediaobject>
      </example>

      <formalpara>
        <title>Usage condition</title>

        <para>Both client and server must be
        <classname>singleton</classname></para>

        <para>If one of them is not a singleton than the static annotation has
        no effect and a warning is generated in the compilation time.</para>
      </formalpara>

      <formalpara>
        <title>Consequences</title>

        <para>The binding between the client A and the server B can't be
        removed.</para>

        <para>Another client A' still have the possibility to be bound to the
        server B.</para>
      </formalpara>

      <formalpara>
        <title>Gains</title>

        <para>This annotation mainly reduce the call time between a client and
        a server interface.</para>
      </formalpara>

      <formalpara>
        <title>Example</title>

        <para>The <code>@Static</code> annotation is described in the file
        <code>adl-backend-static/src/test/resources/optimizations/inline/Increment.adl</code></para>

        <example>
          <title>The @Static annotation</title>

          <programlisting language="adl" linenumbering="unnumbered">
			<?db-font-size 75% ?>
			<xi:include href="../../adl-backend-static/src/test/resources/optimizations/inline/Increment.adl"
              parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
			</programlisting>
        </example>
      </formalpara>
    </section>

    <section id="optim-annot-singleton">
      <title>
        <classname>@Singleton</classname>
      </title>

      <formalpara>
        <title>Annotation fields</title>

        <para>No field</para>
      </formalpara>

      <formalpara>
        <title>Annotation targets</title>

        <para>
          <simplelist type="inline">
            <member>Definition</member>
          </simplelist>
        </para>
      </formalpara>

      <para>The <classname>Singleton</classname> annotation specifies that the
      definition can be instantiated only a single time in a given
      application. An error is reported by the &productName; toolchain if a
      definition with this annotation is instantiated more that once in an
      application.</para>

      <note>
        <para>Composite definition that contains at least on singleton
        sub-component are implicitly declared singleton. It is recommended to
        add explicitly the <classname>Singleton</classname> annotation on such
        composite definition.</para>
      </note>

      <note>
        <para>Instantiating a generic definition by passing a singleton
        definition as value result in a singleton definition.</para>
      </note>

      <example>
        <title>@Singleton overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/AtSingleton.png"
                       format="PNG" scale="50"/>
          </imageobject>
        </mediaobject>
      </example>

      <formalpara>
        <title>Usage condition</title>

        <para>No condition</para>

        <para/>
      </formalpara>

      <formalpara>
        <title>Consequences</title>

        <para>The annotated component can't be instantiated several
        time.</para>
      </formalpara>

      <formalpara>
        <title>Gains</title>

        <para>Some gain in memory stack.</para>
      </formalpara>

      <formalpara>
        <title>Example</title>

        <para>The <code>@Singleton</code> annotation is described in the file
        <code>adl-backend-static/src/test/resources/optimizations/optimizations/GenericApplicationS.adl</code></para>

        <example>
          <title>The @Singleton annotation</title>

          <programlisting language="adl" linenumbering="unnumbered">
			<?db-font-size 75% ?>
			<xi:include href="../../adl-backend-static/src/test/resources/optimizations/GenericApplicationS.adl"
              parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
			</programlisting>
        </example>
      </formalpara>
    </section>

    <section id="optim-annot-StaticBindings">
      <title>
        <classname>@StaticBindings</classname>
      </title>

      <formalpara>
        <title>Annotation fields</title>

        <para>No field</para>
      </formalpara>

      <formalpara>
        <title>Annotation targets</title>

        <para>
          <simplelist type="inline">
            <member>Composite definition</member>
          </simplelist>
        </para>
      </formalpara>

      <para>The <classname>StaticBindings</classname> annotation specifies
      that all binding in the composite are statics.</para>

      <para>This annotation is used on composite definition.</para>

      <note>
        <para>Remove all meta data in the server interfaces.</para>
      </note>

      <note>
        <para>This annotation generalize the <classname>Static</classname>
        annotation for all bindings inside the composite.</para>
      </note>

      <example>
        <title>@StaticBindings overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/AtStaticBindings.png"
                       format="PNG" scale="50"/>
          </imageobject>
        </mediaobject>
      </example>

      <formalpara>
        <title>Usage condition</title>

        <para>All sub-components must be
        <classname>singleton</classname>.</para>
      </formalpara>

      <formalpara>
        <title>Consequences</title>

        <para>Remove all possibility of dynamic binding for the selected
        composite.</para>
      </formalpara>

      <formalpara>
        <title>Gains</title>

        <para>This annotation allows to reduce the memory application's
        footprint and reduce call time.</para>
      </formalpara>

      <formalpara>
        <title>Example</title>

        <example>
          <title>The @StaticDefinitionBindingsList annotation</title>

          <programlisting language="adl" linenumbering="unnumbered">
			<?db-font-size 75% ?>
			<xi:include href="../../adl-backend-static/src/test/resources/optimizations/GenericApplicationSB.adl"
              parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
			</programlisting>
        </example>
      </formalpara>
    </section>

    <section id="optim-annot-GarbageUnusedInternal">
      <title>
        <classname>@GarbageUnusedInternal</classname>
      </title>

      <formalpara>
        <title>Annotation fields</title>

        <para>recursive:{true,false}</para>

        <para>This option allows to propagate the annotation in all
        sub-composites.</para>
      </formalpara>

      <formalpara>
        <title>Annotation targets</title>

        <para>
          <simplelist type="inline">
            <member>Composite definition</member>
          </simplelist>
        </para>
      </formalpara>

      <para>The <classname>GarbageUsunedInternal</classname> annotation allows
      to remove residual generated code in conjunction with the usage of the
      annotation <classname>StaticBindings</classname>.</para>

      <para>This annotation is used on composite definition.</para>

      <note>
        <para>This remove unused code for composite and primitive definitions
        (remote the totality of the membrane code).</para>
      </note>

      <note>
        <para>This annotation is destined to be merged with the
        <classname>StaticBindings</classname> annotation.</para>
      </note>

      <example>
        <title>@GarbageUnusedInternal overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/AtGarbageUnusedInternal.png"
                       format="PNG" scale="50"/>
          </imageobject>
        </mediaobject>
      </example>

      <formalpara>
        <title>Usage condition</title>

        <para>No collection in the composite allowed.</para>

        <para>No unbound interface allowed.</para>

        <para>[TO BE CHECKED] Allows only one required controller.</para>

        <para>[TO BE CHECKED] Allows only one provided controller.</para>
      </formalpara>

      <formalpara>
        <title>Consequences</title>

        <para>Remove all possibility of dynamic binding for the selected
        composite.</para>
      </formalpara>

      <formalpara>
        <title>Gains</title>

        <para>This annotation allows to reduce the memory application's
        footprint.</para>
      </formalpara>

      <formalpara>
        <title>Example</title>

        <example>
          <title>The @GarbageUnusedInternal annotation</title>

          <programlisting language="adl" linenumbering="unnumbered">
			<?db-font-size 75% ?>
			<xi:include href="../../adl-backend-static/src/test/resources/optimizations/GenericApplicationGUI.adl"
              parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
			</programlisting>
        </example>
      </formalpara>
    </section>

    <section id="optim-annot-StaticDefinitionBindingsList">
      <title>
        <classname>@StaticDefinitionBindingsList</classname>
      </title>

      <formalpara>
        <title>Annotation fields</title>

        <para>
          <simplelist type="inline">
            <member>@StaticDefinitionsBindingsList({@StaticDefinitionBinding(fromItf
            = "&lt;client interface&gt;", toItf = "server
            interface")})</member>
          </simplelist>
        </para>
      </formalpara>

      <formalpara>
        <title>Annotation targets</title>

        <para>
          <simplelist type="inline">
            <member>Composite definition</member>
          </simplelist>
        </para>
      </formalpara>

      <para>The <classname>StaticDefinitionBindingsList</classname> annotation
      allows to connect explicitly one or several client interface of a
      component to a server interface of a component definition.</para>

      <note>
        <para>The call function is bloked on a component definition.</para>
      </note>

      <note>
        <para>The client component and the server component are not necessary
        singleton.</para>
      </note>

      <note>
        <para>The server component type can be instanciated several time in
        the composite.</para>
      </note>

      <example>
        <title>@StaticDefinitionBindingsList overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/AtStaticDefinitionBindingsList.png"
                       format="PNG" scale="50"/>
          </imageobject>
        </mediaobject>
      </example>

      <formalpara>
        <title>Usage condition</title>

        <para>The server component is not
        <classname>singleton</classname>.</para>
      </formalpara>

      <formalpara>
        <title>Consequences</title>

        <para>Remove all possibility of dynamic binding for the selected
        binding.</para>
      </formalpara>

      <formalpara>
        <title>Gains</title>

        <para>This annotation allows to call time of the specified
        binding.</para>
      </formalpara>

      <formalpara>
        <title>Example</title>

        <example>
          <title>The @StaticDefinitionBindingsList annotation</title>

          <programlisting language="adl" linenumbering="unnumbered">
			<?db-font-size 75% ?>
			<xi:include href="../../adl-backend-static/src/test/resources/optimizations/definitionbinding/factory/selfcall/Helloworld.adl"
              parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
			</programlisting>
        </example>
      </formalpara>
    </section>

    <section id="optim-annot-FreezeCallPointer">
      <title>
        <classname>@FreezeCallPointer</classname>
      </title>

      <formalpara>
        <title>Annotation fields</title>

        <para>@FreezeCallPointer(toItf="server interface")</para>
      </formalpara>

      <formalpara>
        <title>Annotation targets</title>

        <para>
          <simplelist type="inline">
            <member>primitive</member>
          </simplelist>
        </para>
      </formalpara>

      <para>The <classname>FreezeCallPointer</classname> annotation allows to
      call an explicite server interface via an interface pointer (macro
      CALL_PTR).</para>

      <note>
        <para>...</para>
      </note>

      <note>
        <para>...</para>
      </note>

      <example>
        <title>@FreezeCallPointer overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/AtFreezeCallPointer.png"
                       format="PNG" scale="50"/>
          </imageobject>
        </mediaobject>
      </example>

      <formalpara>
        <title>Usage condition</title>

        <para>No declaration of the server interface in the client ADL
        component.</para>
      </formalpara>

      <formalpara>
        <title>Consequences</title>

        <para>The client interface can't be bound to another server interface.
        The binding is frozen.</para>
      </formalpara>

      <formalpara>
        <title>Gains</title>

        <para>The compiler does direct call to the server interface. This
        reduce the call time.</para>
      </formalpara>

      <formalpara>
        <title>Example</title>

        <example>
          <title>The @FreezeCallPointer annotation</title>

          <programlisting language="adl" linenumbering="unnumbered">
			<?db-font-size 75% ?>
			<xi:include href="../../adl-backend-static/src/test/resources/optimizations/singlestaticcallptr/factory/selfcall/Client.adl"
              parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/>
			</programlisting>
        </example>
      </formalpara>
    </section>

    <section id="optim-annot-Single">
      <title>
        <classname>@Single</classname>
      </title>

      <formalpara>
        <title>Annotation fields</title>

        <para>No field</para>
      </formalpara>

      <formalpara>
        <title>Annotation targets</title>

        <para>
          <simplelist type="inline">
            <member>binding</member>
          </simplelist>
        </para>
      </formalpara>

      <para>The <classname>Single</classname> annotation allows to ...</para>

      <note>
        <para>...</para>
      </note>

      <note>
        <para>...</para>
      </note>

      <example>
        <title>@Single overview</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center"
                       fileref="images/AtGarbageUnusedInternal.png"
                       format="PNG" scale="50"/>
          </imageobject>
        </mediaobject>
      </example>

      <formalpara>
        <title>Usage condition</title>

        <para>....</para>

        <para/>

        <para/>

        <para/>
      </formalpara>

      <formalpara>
        <title>Consequences</title>

        <para>...</para>
      </formalpara>

      <formalpara>
        <title>Gains</title>

        <para>...</para>
      </formalpara>

      <formalpara>
        <title>Example</title>

        <para>...</para>
      </formalpara>
    </section>

    <section id="optim-annot-Inline">
      <title>
        <classname>@Inline [TODO]</classname>
      </title>

      <formalpara>
        <title>Annotation fields</title>

        <para>No field</para>
      </formalpara>

      <formalpara>
        <title>Annotation targets</title>

        <para>
          <simplelist type="inline">
            <member>binding</member>
          </simplelist>
        </para>
      </formalpara>

      <para>The <classname>Inline</classname> annotation allows to remove
      residual generated code in conjunction with the usage of the annotation
      <classname>StaticBindings</classname>.&productName;</para>

      <para>This annotation is used on composite definition.</para>

      <note>
        <para>This remove unused code for composite and primitive
        definitions.</para>
      </note>

      <note>
        <para>This remove unused code for composite and primitive
        definitions.</para>
      </note>

      <formalpara><title>Usage condition</title><para>Unusable if there's
      collection.</para><classname/> .<para>...</para></formalpara>

      <formalpara>
        <title>Constraints</title>

        <para>Remove all possibility of dynamic binding for the selected
        composite.</para>
      </formalpara>

      <formalpara>
        <title>Gains</title>

        <para>This annotation allows to reduce the memory application's
        footprint and increase call indirections.</para>
      </formalpara>

      <formalpara>
        <title>Example</title>

        <para>...</para>
      </formalpara>
    </section>
  </chapter>
</book>
